/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"
#include "s3eDevice.h"


#include "s3eGameCircle.h"


#ifndef S3E_EXT_SKIP_LOADER_CALL_LOCK
// For MIPs (and WP8) platform we do not have asm code for stack switching
// implemented. So we make LoaderCallStart call manually to set GlobalLock
#if defined __mips || defined S3E_ANDROID_X86 || (defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP))
#define LOADER_CALL_LOCK
#endif
#endif

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef  s3eResult(*s3eGameCircleRegister_t)(s3eGameCircleCallback cbid, s3eCallback fn, void* userData);
typedef  s3eResult(*s3eGameCircleUnRegister_t)(s3eGameCircleCallback cbid, s3eCallback fn);
typedef       void(*s3eGameCircleInitialize_t)(bool useAchievements, bool useLeaderboards);
typedef       bool(*s3eGameCircleIsInitialized_t)();
typedef       void(*s3eGameCircleShowAchievementsOverlay_t)();
typedef       void(*s3eGameCircleUpdateAchievement_t)(const char* achievementId, float percentComplete, const char* developerPayload);
typedef       void(*s3eGameCircleShowLeaderboardOverlay_t)(const char* leaderboardId);
typedef       void(*s3eGameCircleShowLeaderboardsOverlay_t)();
typedef       void(*s3eGameCircleSubmitScore_t)(const char* leaderboardId, int64_t score, const char* developerPayload);

/**
 * struct that gets filled in by s3eGameCircleRegister
 */
typedef struct s3eGameCircleFuncs
{
    s3eGameCircleRegister_t m_s3eGameCircleRegister;
    s3eGameCircleUnRegister_t m_s3eGameCircleUnRegister;
    s3eGameCircleInitialize_t m_s3eGameCircleInitialize;
    s3eGameCircleIsInitialized_t m_s3eGameCircleIsInitialized;
    s3eGameCircleShowAchievementsOverlay_t m_s3eGameCircleShowAchievementsOverlay;
    s3eGameCircleUpdateAchievement_t m_s3eGameCircleUpdateAchievement;
    s3eGameCircleShowLeaderboardOverlay_t m_s3eGameCircleShowLeaderboardOverlay;
    s3eGameCircleShowLeaderboardsOverlay_t m_s3eGameCircleShowLeaderboardsOverlay;
    s3eGameCircleSubmitScore_t m_s3eGameCircleSubmitScore;
} s3eGameCircleFuncs;

static s3eGameCircleFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0x1b7f827c, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE,                 "error loading extension: s3eGameCircle");

        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0x1b7f827c, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool s3eGameCircleAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

s3eResult s3eGameCircleRegister(s3eGameCircleCallback cbid, s3eCallback fn, void* userData)
{
    IwTrace(GAMECIRCLE_VERBOSE, ("calling s3eGameCircle[0] func: s3eGameCircleRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eGameCircleRegister(cbid, fn, userData);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult s3eGameCircleUnRegister(s3eGameCircleCallback cbid, s3eCallback fn)
{
    IwTrace(GAMECIRCLE_VERBOSE, ("calling s3eGameCircle[1] func: s3eGameCircleUnRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eGameCircleUnRegister(cbid, fn);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void s3eGameCircleInitialize(bool useAchievements, bool useLeaderboards)
{
    IwTrace(GAMECIRCLE_VERBOSE, ("calling s3eGameCircle[2] func: s3eGameCircleInitialize"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eGameCircleInitialize(useAchievements, useLeaderboards);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

bool s3eGameCircleIsInitialized()
{
    IwTrace(GAMECIRCLE_VERBOSE, ("calling s3eGameCircle[3] func: s3eGameCircleIsInitialized"));

    if (!_extLoad())
        return false;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    bool ret = g_Ext.m_s3eGameCircleIsInitialized();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void s3eGameCircleShowAchievementsOverlay()
{
    IwTrace(GAMECIRCLE_VERBOSE, ("calling s3eGameCircle[4] func: s3eGameCircleShowAchievementsOverlay"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eGameCircleShowAchievementsOverlay();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eGameCircleUpdateAchievement(const char* achievementId, float percentComplete, const char* developerPayload)
{
    IwTrace(GAMECIRCLE_VERBOSE, ("calling s3eGameCircle[5] func: s3eGameCircleUpdateAchievement"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eGameCircleUpdateAchievement(achievementId, percentComplete, developerPayload);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eGameCircleShowLeaderboardOverlay(const char* leaderboardId)
{
    IwTrace(GAMECIRCLE_VERBOSE, ("calling s3eGameCircle[6] func: s3eGameCircleShowLeaderboardOverlay"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eGameCircleShowLeaderboardOverlay(leaderboardId);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eGameCircleShowLeaderboardsOverlay()
{
    IwTrace(GAMECIRCLE_VERBOSE, ("calling s3eGameCircle[7] func: s3eGameCircleShowLeaderboardsOverlay"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eGameCircleShowLeaderboardsOverlay();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eGameCircleSubmitScore(const char* leaderboardId, int64_t score, const char* developerPayload)
{
    IwTrace(GAMECIRCLE_VERBOSE, ("calling s3eGameCircle[8] func: s3eGameCircleSubmitScore"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eGameCircleSubmitScore(leaderboardId, score, developerPayload);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}
