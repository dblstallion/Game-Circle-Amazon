/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "s3eGameCircle_autodefs.h"
#include "s3eEdk.h"
#include "s3eGameCircle.h"
//Declarations of Init and Term functions
extern s3eResult s3eGameCircleInit();
extern void s3eGameCircleTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static void s3eGameCircleInitialize_wrap(bool useAchievements, bool useLeaderboards)
{
    IwTrace(GAMECIRCLE_VERBOSE, ("calling s3eGameCircle func on main thread: s3eGameCircleInitialize"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eGameCircleInitialize, 2, useAchievements, useLeaderboards);
}

#define s3eGameCircleInitialize s3eGameCircleInitialize_wrap

#endif

s3eResult s3eGameCircleRegister(s3eGameCircleCallback cbid, s3eCallback fn, void* pData)
{
    return s3eEdkCallbacksRegister(S3E_EXT_GAMECIRCLE_HASH, S3E_GAMECIRCLE_CALLBACK_MAX, cbid, fn, pData, 0);
};

s3eResult s3eGameCircleUnRegister(s3eGameCircleCallback cbid, s3eCallback fn)
{
    return s3eEdkCallbacksUnRegister(S3E_EXT_GAMECIRCLE_HASH, S3E_GAMECIRCLE_CALLBACK_MAX, cbid, fn);
}

void s3eGameCircleRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[9];
    funcPtrs[0] = (void*)s3eGameCircleRegister;
    funcPtrs[1] = (void*)s3eGameCircleUnRegister;
    funcPtrs[2] = (void*)s3eGameCircleInitialize;
    funcPtrs[3] = (void*)s3eGameCircleIsInitialized;
    funcPtrs[4] = (void*)s3eGameCircleShowAchievementsOverlay;
    funcPtrs[5] = (void*)s3eGameCircleUpdateAchievement;
    funcPtrs[6] = (void*)s3eGameCircleShowLeaderboardOverlay;
    funcPtrs[7] = (void*)s3eGameCircleShowLeaderboardsOverlay;
    funcPtrs[8] = (void*)s3eGameCircleSubmitScore;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[9] = { 0 };

    /*
     * Register the extension
     */
    s3eEdkRegister("s3eGameCircle", funcPtrs, sizeof(funcPtrs), flags, s3eGameCircleInit, s3eGameCircleTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int s3eGameCircleStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&s3eGameCircleRegisterExt;
    return 0;
}

int g_s3eGameCircleVal = s3eGameCircleStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    s3eGameCircleRegisterExt();
}
#endif

#endif
